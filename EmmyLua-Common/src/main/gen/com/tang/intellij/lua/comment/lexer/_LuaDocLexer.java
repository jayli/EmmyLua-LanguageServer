/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xPARAM_ID = 12;
  public static final int xTYPE_REF = 14;
  public static final int xCLASS = 16;
  public static final int xCLASS_EXTEND = 18;
  public static final int xFIELD = 20;
  public static final int xFIELD_ID = 22;
  public static final int xFIELD_ID_NULLABLE = 24;
  public static final int xFIELD_INDEX = 26;
  public static final int xGENERIC = 28;
  public static final int xALIAS = 30;
  public static final int xSUPPRESS = 32;
  public static final int xDOUBLE_QUOTED_STRING = 34;
  public static final int xSINGLE_QUOTED_STRING = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  6,  6, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17472 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\24"+
    "\10\1\41\3\10\1\23\1\42\1\41\4\10\1\43\1\44\4\0\1\45\1\46\1\26\3\10\2\47\1"+
    "\26\1\50\1\51\1\0\1\52\5\10\1\53\3\0\1\54\1\55\13\10\1\56\1\45\1\57\1\60\1"+
    "\0\1\61\1\26\1\62\1\63\3\10\3\0\1\64\12\10\1\65\1\0\1\66\1\26\1\0\1\67\3\10"+
    "\1\53\1\70\1\22\2\10\1\65\1\71\1\72\1\73\2\26\3\10\1\74\1\10\1\47\6\26\2\10"+
    "\1\31\1\75\2\26\1\76\5\0\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\1\41\1\10"+
    "\1\103\1\104\1\105\2\10\1\106\1\107\1\110\1\111\1\112\1\62\1\113\1\102\1\0"+
    "\1\114\1\115\1\116\1\117\1\105\2\10\1\106\1\120\1\121\1\122\1\123\1\124\1"+
    "\125\1\126\1\0\1\127\1\26\1\116\1\36\1\35\2\10\1\106\1\130\1\110\1\45\1\131"+
    "\1\132\1\26\1\102\1\0\1\42\1\133\1\116\1\104\1\105\2\10\1\106\1\130\1\110"+
    "\1\111\1\123\1\126\1\113\1\102\1\0\1\42\1\26\1\134\1\135\1\136\1\137\1\115"+
    "\1\135\1\10\1\140\1\141\1\142\1\143\1\26\1\126\1\0\1\26\1\42\1\144\1\31\1"+
    "\106\2\10\1\106\1\10\1\145\1\146\1\142\1\147\1\47\1\102\1\0\2\26\1\103\1\31"+
    "\1\106\2\10\1\106\1\150\1\110\1\146\1\142\1\147\1\33\1\102\1\0\1\151\1\26"+
    "\1\144\1\31\1\106\4\10\1\152\1\146\1\153\1\154\1\43\1\102\1\0\1\26\1\40\1"+
    "\155\1\10\1\23\1\40\2\10\1\35\1\156\1\23\1\157\1\160\1\0\1\126\1\0\1\161\1"+
    "\26\1\41\5\10\1\162\1\163\1\164\1\165\1\0\1\166\4\26\1\167\1\170\1\171\1\41"+
    "\1\172\1\173\1\162\1\174\1\175\1\50\1\0\1\176\4\26\1\132\2\26\1\166\1\0\1"+
    "\166\1\177\1\200\1\10\1\41\3\10\1\27\1\44\1\0\1\146\1\201\1\0\1\44\3\0\1\202"+
    "\1\203\7\26\5\10\1\53\1\0\1\204\1\0\1\166\1\65\1\205\1\206\1\207\1\210\1\10"+
    "\1\211\1\212\1\0\1\50\4\10\1\36\1\21\5\10\1\213\51\10\1\136\1\23\1\136\5\10"+
    "\1\136\4\10\1\136\1\23\1\136\1\10\1\23\7\10\1\136\10\10\1\214\4\26\2\10\2"+
    "\26\12\10\2\75\1\41\114\10\1\104\2\10\1\215\2\10\1\47\11\10\1\135\1\10\1\132"+
    "\1\10\1\31\1\216\1\26\2\10\1\216\1\26\2\10\1\217\1\26\1\10\1\31\1\220\1\26"+
    "\6\10\1\221\3\0\1\222\1\223\1\0\1\166\3\26\1\224\1\0\1\166\13\10\1\26\1\225"+
    "\4\10\1\226\10\10\1\75\1\26\3\10\1\23\1\0\1\2\1\0\1\2\1\126\1\0\3\10\1\75"+
    "\1\27\1\26\5\10\1\114\3\10\1\25\1\0\1\166\4\26\2\10\1\164\1\2\6\10\1\201\1"+
    "\165\3\0\1\111\1\0\1\166\1\0\1\166\1\43\1\26\1\0\1\50\10\26\1\227\5\10\1\221"+
    "\1\0\1\227\1\114\1\0\1\166\1\26\1\230\1\2\1\26\1\231\3\10\1\101\1\207\1\0"+
    "\1\67\4\10\1\65\1\0\1\2\1\26\4\10\1\221\2\0\1\26\1\0\1\232\1\0\1\67\3\10\1"+
    "\75\1\10\1\132\10\26\1\233\2\0\1\234\1\235\1\166\30\10\7\0\1\236\42\10\2\75"+
    "\4\10\2\75\1\10\1\237\3\10\1\75\6\10\1\31\1\175\1\240\1\27\1\241\1\114\1\10"+
    "\1\27\1\240\1\27\1\242\1\243\3\26\1\244\1\26\1\43\1\132\1\26\1\245\1\246\1"+
    "\146\1\0\1\42\1\43\2\26\1\10\1\27\4\10\2\26\1\0\1\202\1\247\1\0\1\250\1\26"+
    "\1\251\1\40\1\156\1\252\1\30\1\253\1\10\1\254\1\255\1\256\2\26\5\10\1\132"+
    "\116\26\5\10\1\23\5\10\1\23\20\10\1\27\1\257\1\260\1\26\4\10\1\36\1\21\7\10"+
    "\1\43\1\26\1\62\2\10\1\23\1\26\10\23\4\0\5\26\1\43\72\26\1\261\3\26\1\41\1"+
    "\211\1\252\1\27\1\41\11\10\1\23\1\262\1\41\12\10\1\213\1\255\4\10\1\23\1\41"+
    "\12\10\1\23\2\26\3\10\1\47\6\26\170\10\1\75\11\26\75\10\1\47\2\26\21\10\1"+
    "\27\10\26\5\10\1\75\41\10\1\27\2\10\1\0\1\260\2\26\5\10\1\164\1\76\1\263\3"+
    "\10\1\65\12\10\1\166\3\26\1\43\1\10\1\40\14\10\1\105\3\10\1\23\1\10\7\26\1"+
    "\43\1\10\1\264\1\265\2\10\1\53\2\26\1\132\6\10\1\114\1\26\1\67\5\10\1\221"+
    "\1\0\1\50\1\26\1\0\1\166\2\0\1\67\1\266\1\0\1\67\2\10\1\65\1\50\2\10\1\164"+
    "\1\0\1\2\1\26\3\10\1\27\1\77\5\10\1\53\1\0\1\250\1\43\1\0\1\166\1\267\1\10"+
    "\1\0\1\270\5\10\1\101\1\165\1\26\1\265\1\271\1\0\1\166\2\10\1\23\1\272\6\10"+
    "\1\206\1\273\1\226\2\26\1\274\1\10\1\53\1\275\1\26\3\276\1\26\2\23\5\10\1"+
    "\213\1\75\1\26\16\10\1\53\1\277\1\0\1\166\64\10\1\114\1\26\2\10\1\23\1\300"+
    "\5\10\1\114\40\26\55\10\1\75\15\10\1\25\4\26\1\23\1\26\1\300\1\301\1\10\1"+
    "\106\1\23\1\175\1\302\15\10\1\25\3\26\1\300\54\10\1\75\2\26\10\10\1\40\6\10"+
    "\5\26\1\10\1\27\2\0\2\26\2\0\1\115\2\26\1\255\3\26\1\42\1\31\20\10\1\303\1"+
    "\245\1\26\1\0\1\166\1\41\2\10\1\117\1\41\2\10\1\47\1\304\12\10\1\23\3\40\1"+
    "\305\1\306\2\26\1\307\1\10\1\150\2\10\1\23\2\10\1\310\1\10\1\75\1\10\1\75"+
    "\4\26\17\10\1\47\10\26\6\10\1\27\20\26\1\311\20\26\3\10\1\27\6\10\1\132\1"+
    "\26\1\250\3\26\4\10\1\26\1\255\3\10\1\47\4\10\1\65\1\312\3\10\1\75\4\10\1"+
    "\114\1\10\1\252\5\26\23\10\1\75\1\0\1\166\4\10\1\114\4\10\1\114\5\10\1\26"+
    "\6\10\1\114\23\26\46\10\1\23\1\26\2\10\1\75\1\26\1\10\23\26\1\75\1\106\4\10"+
    "\1\36\1\313\2\10\1\75\1\26\2\10\1\23\1\26\3\10\1\23\10\26\2\10\1\314\1\26"+
    "\2\10\1\75\1\26\3\10\1\25\10\26\7\10\1\304\10\26\1\315\1\76\1\150\1\41\2\10"+
    "\1\114\1\122\4\26\3\10\1\27\3\10\1\27\4\26\1\10\1\41\2\10\1\316\3\26\6\10"+
    "\1\75\1\26\2\10\1\75\1\26\2\10\1\47\1\26\2\10\1\25\15\26\11\10\1\132\6\26"+
    "\6\10\1\47\1\26\6\10\1\47\41\26\1\231\6\10\1\0\1\165\3\26\1\126\1\0\1\26\1"+
    "\62\1\231\5\10\1\0\1\317\2\26\3\10\1\132\1\0\1\166\1\231\3\10\1\164\1\0\1"+
    "\146\1\0\2\26\4\10\1\320\1\26\1\231\5\10\1\53\1\0\1\321\1\322\1\0\1\323\4"+
    "\26\2\10\1\35\2\10\1\221\1\0\1\203\10\26\1\23\1\253\1\10\1\36\1\10\1\132\5"+
    "\10\1\164\1\0\1\312\1\0\1\166\1\144\1\104\1\105\2\10\1\106\1\130\1\110\1\111"+
    "\1\123\1\143\1\255\1\102\2\202\21\26\6\10\1\201\1\0\1\204\1\47\1\0\1\166\4"+
    "\26\6\10\2\0\1\324\1\26\1\0\1\166\24\26\5\10\1\164\1\50\1\0\1\250\2\26\1\271"+
    "\4\26\6\10\2\0\1\325\1\26\1\0\1\166\4\26\5\10\1\53\1\0\1\26\1\0\1\166\6\26"+
    "\3\10\1\326\1\0\1\2\1\0\1\166\54\26\10\10\1\0\1\166\1\26\1\43\40\26\1\101"+
    "\1\231\4\10\1\53\1\327\1\62\1\26\1\101\1\77\4\10\1\241\1\211\1\0\1\166\4\26"+
    "\7\10\1\132\40\26\1\10\1\106\3\10\1\164\1\165\1\0\1\132\1\26\1\0\1\166\2\26"+
    "\1\40\3\10\1\330\2\0\1\44\1\165\11\26\1\23\1\35\4\10\1\331\1\332\1\212\1\26"+
    "\1\0\1\166\24\26\63\10\1\25\14\26\15\10\1\23\2\26\30\10\1\114\27\26\5\10\1"+
    "\23\72\26\10\10\1\23\67\26\7\10\1\132\3\10\1\23\1\0\1\166\14\26\3\10\1\75"+
    "\1\202\1\26\6\10\1\165\1\26\1\114\1\26\1\0\1\166\1\300\2\10\1\255\2\10\56"+
    "\26\10\10\1\27\1\26\1\101\4\0\1\165\1\26\1\62\1\231\1\10\10\26\1\25\3\26\75"+
    "\10\1\27\2\26\36\10\1\47\41\26\43\10\1\23\12\26\61\10\1\114\40\26\15\10\1"+
    "\47\1\10\1\27\1\10\1\132\1\10\1\333\1\2\127\26\1\334\1\335\2\0\1\336\1\2\3"+
    "\26\1\337\22\26\1\322\67\26\12\10\1\31\10\10\1\31\1\340\1\341\1\10\1\342\1"+
    "\150\7\10\1\36\1\343\2\31\3\10\1\344\1\175\1\40\1\106\51\10\1\75\3\10\1\106"+
    "\2\10\1\213\3\10\1\213\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\106"+
    "\3\10\1\106\2\10\1\213\1\345\14\0\1\165\1\230\5\0\1\202\1\311\1\26\1\346\2"+
    "\26\1\230\1\44\1\0\52\26\1\165\2\0\1\347\1\350\1\312\72\26\30\10\1\27\1\26"+
    "\1\165\5\26\10\10\1\221\1\312\1\0\1\166\24\26\1\150\3\10\1\167\1\41\1\213"+
    "\1\351\1\251\1\352\1\167\1\237\1\167\2\213\1\125\1\10\1\35\1\10\1\114\1\353"+
    "\1\35\1\10\1\114\50\26\32\10\1\23\5\26\106\10\1\27\1\26\33\10\1\75\120\10"+
    "\1\25\1\26\146\10\1\132\3\26\3\10\1\75\74\26\1\124\3\26\14\0\20\26\36\0\2"+
    "\26");

  /* The ZZ_CMAP_A table has 1888 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\16\1\4\1\2\1\20\1\4\1\1\6\16\4\15\1\3\1\15\1\13\1\60\1\5\2\15\1\17\1\54"+
    "\1\55\2\15\1\44\1\12\1\7\1\15\12\10\1\45\1\15\1\52\1\15\1\53\1\46\1\11\22"+
    "\5\1\47\1\14\1\50\1\15\1\5\1\15\1\27\1\43\1\34\1\25\1\23\1\21\1\33\1\5\1\22"+
    "\2\5\1\24\1\31\1\40\1\36\1\26\1\5\1\30\1\35\1\41\1\37\1\32\2\5\1\42\1\5\1"+
    "\56\1\51\1\57\1\15\6\16\1\6\2\16\1\0\1\15\4\5\4\15\1\5\2\15\1\16\7\15\1\5"+
    "\4\15\1\5\5\15\7\5\1\15\2\5\4\15\4\5\16\15\5\5\7\15\1\5\1\15\1\5\1\15\5\5"+
    "\1\15\2\5\2\15\4\5\1\15\1\5\6\15\1\5\1\15\3\5\1\15\1\5\1\15\4\5\1\15\13\5"+
    "\1\15\3\5\1\15\5\16\2\15\6\5\1\15\7\5\1\15\1\5\15\15\1\5\1\15\15\16\1\15\1"+
    "\16\1\15\2\16\1\15\2\16\1\15\1\16\3\5\5\15\6\16\5\15\1\5\4\15\3\16\1\15\1"+
    "\16\3\15\3\5\7\16\4\15\2\5\1\16\13\5\1\15\1\5\7\16\2\5\2\16\1\15\4\16\2\5"+
    "\2\16\3\5\2\15\1\5\7\15\1\16\1\5\1\16\6\5\3\16\2\15\11\5\3\16\1\5\6\15\2\16"+
    "\6\5\4\16\2\5\2\15\2\16\1\5\11\16\1\5\3\16\1\5\5\16\2\15\1\5\3\16\4\15\6\5"+
    "\6\15\10\16\6\5\3\16\1\5\2\16\1\5\7\16\2\5\2\16\2\15\2\16\1\5\3\16\1\15\10"+
    "\5\2\15\2\5\2\15\6\5\1\15\7\5\1\15\1\5\3\15\4\5\2\15\1\16\1\5\7\16\2\15\2"+
    "\16\2\15\3\16\1\5\5\15\2\5\1\15\5\5\7\15\2\5\4\15\3\16\1\15\6\5\4\15\2\5\1"+
    "\15\2\5\1\15\2\5\1\15\2\5\2\15\1\16\1\15\5\16\4\15\2\16\2\15\3\16\3\15\1\16"+
    "\7\15\4\5\1\15\1\5\7\15\4\16\3\5\1\16\2\15\1\5\1\15\2\5\1\15\3\5\2\16\1\15"+
    "\3\16\2\15\1\5\10\15\1\5\6\16\2\15\1\16\1\5\1\15\6\5\3\15\3\5\1\15\4\5\3\15"+
    "\2\5\1\15\1\5\1\15\4\5\4\15\5\16\3\15\3\16\1\15\4\16\2\15\1\5\6\15\5\16\1"+
    "\15\5\5\3\15\1\5\7\16\1\15\2\16\5\15\2\16\1\15\4\5\1\15\3\5\1\15\2\5\5\15"+
    "\3\5\2\16\1\5\3\16\1\15\4\16\1\5\5\15\3\5\1\16\2\15\2\16\1\15\7\5\1\15\1\5"+
    "\4\15\1\16\4\15\6\16\1\15\1\16\3\15\2\16\4\15\1\5\1\16\2\5\7\16\4\15\10\5"+
    "\10\16\1\15\2\16\7\15\2\5\1\15\1\5\2\15\2\5\1\15\1\5\2\15\1\5\6\15\4\5\1\15"+
    "\3\5\1\15\1\5\1\15\1\5\2\15\2\5\1\15\3\5\2\16\1\15\2\16\1\5\2\15\5\5\1\15"+
    "\1\5\1\15\2\16\2\15\4\5\5\15\1\16\1\15\1\16\1\15\1\16\4\15\2\16\5\5\10\16"+
    "\11\15\1\16\1\15\7\16\1\5\2\16\4\5\3\16\1\5\3\16\2\5\7\16\3\5\4\16\5\5\14"+
    "\16\1\5\1\16\3\5\1\15\7\5\2\15\3\16\1\0\11\5\3\16\3\15\2\5\2\16\4\15\1\5\1"+
    "\15\2\16\4\15\4\5\10\16\3\15\1\5\3\15\2\5\1\16\5\15\4\16\1\15\5\5\2\16\2\5"+
    "\1\16\1\5\5\15\5\16\3\5\3\15\10\16\5\5\2\16\3\15\3\5\3\16\1\15\5\16\4\5\1"+
    "\16\4\5\3\16\2\5\3\16\1\15\5\16\1\15\1\5\1\15\1\5\1\15\1\5\1\15\1\5\2\15\3"+
    "\5\1\15\6\5\2\15\2\5\13\0\5\16\2\20\5\16\1\0\4\15\1\5\12\15\1\0\1\15\1\16"+
    "\3\15\4\16\11\15\1\5\4\15\1\5\1\15\5\5\2\15\1\5\1\15\4\5\1\15\3\5\2\15\4\5"+
    "\5\15\5\5\4\15\1\5\4\15\4\5\3\16\2\5\4\15\1\0\4\15\3\5\1\15\2\16\2\15\3\5"+
    "\6\16\1\15\3\5\1\16\3\5\1\16\4\5\1\16\4\5\3\15\1\5\1\15\1\5\2\15\5\5\1\16"+
    "\2\5\2\16\5\5\1\15\4\5\2\16\4\15\1\5\3\16\2\5\1\16\5\5\2\16\3\15\3\5\4\15"+
    "\3\5\2\16\2\15\6\5\1\15\3\16\1\15\2\16\5\15\5\5\5\15\1\5\1\16\3\5\1\15\2\5"+
    "\1\15\7\5\2\15\1\16\6\15\2\5\2\15\3\5\3\15\2\5\3\15\2\5\2\15\3\16\4\15\3\5"+
    "\1\15\2\5\1\15\1\5\5\15\1\16\2\15\3\16\5\15\1\5\3\15\1\5\2\15\4\5\1\15\2\5"+
    "\2\15\1\5\3\16\1\15\2\16\1\15\5\5\2\16\1\15\3\16\2\15\1\16\2\15\3\5\1\16\2"+
    "\15\1\5\1\15\1\16\4\5\5\15\3\16\3\15\2\16\1\5\1\15\1\5\3\15\4\16\2\5\1\15"+
    "\1\5\1\16\3\15\1\5\3\15\2\5\3\15\5\16\1\5\4\16\3\15\6\16\1\5\6\16\3\15\1\16"+
    "\1\15\2\16\1\15\1\16\2\5\3\15\2\16\6\15\5\16\3\15\6\16\2\15\3\16\2\15\4\16"+
    "\4\15\1\5\2\15\2\5\2\15\4\5\1\15\4\5\1\15\1\5\1\15\6\5\2\15\5\5\1\15\4\5\1"+
    "\15\4\5\2\15\2\16\4\15\1\16\3\15\1\16\2\15\7\16\1\15\2\16\1\15\2\16\1\15\1"+
    "\5\1\15\1\5\5\15\1\5\1\15\1\5\1\15\3\5\1\15\3\5\1\15\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\15\0\1\2\2\3\1\4\1\5\1\6"+
    "\1\2\2\7\1\10\1\11\1\12\1\13\20\14\1\1"+
    "\1\4\1\15\1\5\1\16\1\17\1\20\1\5\1\21"+
    "\1\22\2\20\1\23\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\2\46\1\47"+
    "\22\14\2\0\2\20\1\50\2\36\1\46\2\0\17\14"+
    "\1\51\3\14\1\45\1\20\1\52\1\20\3\36\2\14"+
    "\1\53\16\14\1\54\1\20\3\36\1\55\3\14\1\56"+
    "\3\14\1\57\4\14\1\60\2\14\1\20\3\36\5\14"+
    "\1\61\1\62\1\63\1\64\3\14\1\65\2\36\1\66"+
    "\3\14\1\67\1\14\1\70\2\14\1\71\1\36\1\14"+
    "\1\72\2\14\1\73\1\74\1\36\1\75\1\14\1\76"+
    "\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u0372\0\u03d4\0\u0372\0\u0372"+
    "\0\u0405\0\u0436\0\u0372\0\u0467\0\u0372\0\u0372\0\u0498\0\u04c9"+
    "\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u0372\0\u0372\0\u089d\0\u08ce\0\u0372"+
    "\0\u0372\0\u08ff\0\u0930\0\u0372\0\u0372\0\u0961\0\u0372\0\u0372"+
    "\0\u0372\0\u0372\0\u0372\0\u0372\0\u0372\0\u0992\0\u0372\0\u09c3"+
    "\0\u09f4\0\u0372\0\u0a25\0\u0372\0\u0372\0\u0372\0\u0372\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0405\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0372\0\u0f1f\0\u0f50\0\u0372\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u04c9\0\u12c2"+
    "\0\u12f3\0\u1324\0\u0372\0\u0372\0\u089d\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u04c9\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u04c9\0\u1729\0\u175a\0\u178b\0\u17bc\0\u04c9"+
    "\0\u17ed\0\u181e\0\u184f\0\u04c9\0\u1880\0\u18b1\0\u18e2\0\u04c9"+
    "\0\u1913\0\u1944\0\u1975\0\u19a6\0\u04c9\0\u19d7\0\u1a08\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u04c9\0\u04c9\0\u04c9\0\u04c9\0\u1bf2\0\u1c23\0\u1c54\0\u089d"+
    "\0\u1c85\0\u1cb6\0\u09c3\0\u1ce7\0\u1d18\0\u1d49\0\u04c9\0\u1d7a"+
    "\0\u04c9\0\u1dab\0\u1ddc\0\u09c3\0\u1e0d\0\u1e3e\0\u04c9\0\u1e6f"+
    "\0\u1ea0\0\u04c9\0\u04c9\0\u1ed1\0\u04c9\0\u1f02\0\u04c9\0\u09c3"+
    "\0\u04c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\2\26\1\23\1\27\2\23\1\30"+
    "\1\31\5\23\1\27\40\23\1\27\1\32\1\33\2\26"+
    "\1\34\3\27\1\35\7\27\23\34\14\27\1\36\1\27"+
    "\1\32\1\33\2\26\1\37\13\27\23\37\16\27\1\32"+
    "\1\33\2\26\1\40\13\27\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\40\1\57\2\40\15\27\1\60\1\32"+
    "\1\33\1\61\1\26\54\60\1\27\1\32\1\33\2\26"+
    "\1\62\1\27\1\63\11\27\23\62\15\27\46\64\1\65"+
    "\12\64\1\27\1\32\1\33\2\26\1\66\1\27\1\67"+
    "\1\27\1\35\1\27\1\70\3\27\1\71\1\27\1\72"+
    "\10\66\1\73\11\66\1\74\1\75\1\27\1\76\1\27"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\2\27"+
    "\1\32\1\33\2\26\1\106\13\27\23\106\15\27\1\23"+
    "\1\32\1\33\2\26\40\23\1\107\13\23\1\27\1\32"+
    "\1\33\2\26\1\110\13\27\5\110\1\111\15\110\3\27"+
    "\1\112\12\27\1\32\1\33\2\26\1\110\13\27\23\110"+
    "\3\27\1\112\16\27\1\34\2\27\1\113\10\27\23\34"+
    "\4\27\1\114\10\27\1\115\1\32\1\33\2\26\1\34"+
    "\13\115\23\34\1\116\1\117\14\115\1\32\1\33\2\26"+
    "\1\120\13\115\23\120\16\115\1\32\1\33\2\26\1\34"+
    "\13\115\23\34\1\116\14\115\13\27\1\121\64\27\1\122"+
    "\41\27\63\0\1\25\61\0\2\26\66\0\1\123\50\0"+
    "\1\33\63\0\4\34\5\0\1\34\2\0\23\34\22\0"+
    "\4\37\5\0\1\37\2\0\23\37\22\0\4\40\5\0"+
    "\1\40\2\0\23\40\22\0\4\40\5\0\1\40\2\0"+
    "\1\40\1\124\21\40\22\0\4\40\5\0\1\40\2\0"+
    "\17\40\1\125\3\40\22\0\4\40\5\0\1\40\2\0"+
    "\17\40\1\126\3\40\22\0\4\40\5\0\1\40\2\0"+
    "\6\40\1\127\14\40\22\0\4\40\5\0\1\40\2\0"+
    "\2\40\1\130\20\40\22\0\4\40\5\0\1\40\2\0"+
    "\6\40\1\131\1\132\6\40\1\133\4\40\22\0\4\40"+
    "\5\0\1\40\2\0\3\40\1\134\17\40\22\0\4\40"+
    "\5\0\1\40\2\0\2\40\1\135\20\40\22\0\4\40"+
    "\5\0\1\40\2\0\15\40\1\136\5\40\22\0\4\40"+
    "\5\0\1\40\2\0\6\40\1\137\14\40\22\0\4\40"+
    "\5\0\1\40\2\0\2\40\1\140\20\40\22\0\4\40"+
    "\5\0\1\40\2\0\3\40\1\141\17\40\22\0\4\40"+
    "\5\0\1\40\2\0\2\40\1\142\13\40\1\143\4\40"+
    "\22\0\4\40\5\0\1\40\2\0\11\40\1\144\11\40"+
    "\22\0\4\40\5\0\1\40\2\0\21\40\1\145\1\40"+
    "\15\0\1\60\2\0\1\60\1\0\55\60\2\0\1\61"+
    "\1\26\54\60\5\0\4\62\5\0\1\62\2\0\23\62"+
    "\24\0\1\146\56\0\4\66\5\0\1\66\2\0\23\66"+
    "\24\0\1\147\56\0\4\66\5\0\1\66\2\0\16\66"+
    "\1\150\4\66\22\0\4\66\5\0\1\66\2\0\6\66"+
    "\1\151\14\66\65\0\1\152\15\0\4\106\5\0\1\106"+
    "\2\0\23\106\22\0\4\110\5\0\1\110\2\0\23\110"+
    "\22\0\4\110\5\0\1\110\2\0\7\110\1\153\6\110"+
    "\1\154\4\110\25\0\1\113\55\0\4\120\5\0\1\120"+
    "\2\0\23\120\15\0\13\121\1\155\1\156\44\121\14\122"+
    "\1\157\2\122\1\155\41\122\5\0\4\40\5\0\1\40"+
    "\2\0\2\40\1\160\20\40\22\0\4\40\5\0\1\40"+
    "\2\0\20\40\1\161\2\40\22\0\4\40\5\0\1\40"+
    "\2\0\16\40\1\162\4\40\22\0\4\40\5\0\1\40"+
    "\2\0\17\40\1\163\3\40\22\0\4\40\5\0\1\40"+
    "\2\0\5\40\1\164\15\40\22\0\4\40\5\0\1\40"+
    "\2\0\7\40\1\165\13\40\22\0\4\40\5\0\1\40"+
    "\2\0\1\40\1\166\13\40\1\167\5\40\22\0\4\40"+
    "\5\0\1\40\2\0\22\40\1\170\22\0\4\40\5\0"+
    "\1\40\2\0\1\40\1\171\21\40\22\0\4\40\5\0"+
    "\1\40\2\0\20\40\1\172\2\40\22\0\4\40\5\0"+
    "\1\40\2\0\4\40\1\173\16\40\22\0\4\40\5\0"+
    "\1\40\2\0\7\40\1\174\13\40\22\0\4\40\5\0"+
    "\1\40\2\0\17\40\1\175\3\40\22\0\4\40\5\0"+
    "\1\40\2\0\6\40\1\176\14\40\22\0\4\40\5\0"+
    "\1\40\2\0\2\40\1\177\20\40\22\0\4\40\5\0"+
    "\1\40\2\0\5\40\1\200\15\40\22\0\4\40\5\0"+
    "\1\40\2\0\2\40\1\201\20\40\22\0\4\40\5\0"+
    "\1\40\2\0\5\40\1\202\15\40\24\0\1\203\60\0"+
    "\1\204\56\0\4\66\5\0\1\66\2\0\17\66\1\205"+
    "\3\66\22\0\4\66\5\0\1\66\2\0\7\66\1\206"+
    "\13\66\22\0\4\110\5\0\1\110\2\0\1\110\1\207"+
    "\13\110\1\210\5\110\22\0\4\110\5\0\1\110\2\0"+
    "\22\110\1\211\16\0\2\121\2\0\1\121\1\0\11\121"+
    "\1\0\40\121\1\0\2\122\2\0\1\122\1\0\11\122"+
    "\1\0\40\122\5\0\4\40\5\0\1\40\2\0\3\40"+
    "\1\212\17\40\22\0\4\40\5\0\1\40\2\0\2\40"+
    "\1\213\20\40\22\0\4\40\5\0\1\40\2\0\10\40"+
    "\1\214\12\40\22\0\4\40\5\0\1\40\2\0\12\40"+
    "\1\215\10\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\216\13\40\22\0\4\40\5\0\1\40\2\0\6\40"+
    "\1\217\14\40\22\0\4\40\5\0\1\40\2\0\11\40"+
    "\1\220\11\40\22\0\4\40\5\0\1\40\2\0\20\40"+
    "\1\221\2\40\22\0\4\40\5\0\1\40\2\0\3\40"+
    "\1\222\17\40\22\0\4\40\5\0\1\40\2\0\6\40"+
    "\1\223\14\40\22\0\4\40\5\0\1\40\2\0\16\40"+
    "\1\224\4\40\22\0\4\40\5\0\1\40\2\0\16\40"+
    "\1\225\4\40\22\0\4\40\5\0\1\40\2\0\6\40"+
    "\1\226\14\40\22\0\4\40\5\0\1\40\2\0\2\40"+
    "\1\227\20\40\22\0\4\40\5\0\1\40\2\0\14\40"+
    "\1\230\6\40\22\0\4\40\5\0\1\40\2\0\5\40"+
    "\1\231\15\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\232\13\40\22\0\4\40\5\0\1\40\2\0\2\40"+
    "\1\233\20\40\22\0\4\66\5\0\1\66\2\0\6\66"+
    "\1\234\14\66\22\0\4\110\5\0\1\110\2\0\11\110"+
    "\1\235\11\110\22\0\4\110\5\0\1\110\2\0\20\110"+
    "\1\236\2\110\22\0\4\110\5\0\1\110\2\0\3\110"+
    "\1\237\17\110\22\0\4\40\5\0\1\40\2\0\4\40"+
    "\1\240\16\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\241\13\40\22\0\4\40\5\0\1\40\2\0\16\40"+
    "\1\242\4\40\22\0\4\40\5\0\1\40\2\0\2\40"+
    "\1\243\20\40\22\0\4\40\5\0\1\40\2\0\10\40"+
    "\1\244\12\40\22\0\4\40\5\0\1\40\2\0\6\40"+
    "\1\245\14\40\22\0\4\40\5\0\1\40\2\0\2\40"+
    "\1\246\20\40\22\0\4\40\5\0\1\40\2\0\1\40"+
    "\1\247\21\40\22\0\4\40\5\0\1\40\2\0\14\40"+
    "\1\250\6\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\251\13\40\22\0\4\40\5\0\1\40\2\0\3\40"+
    "\1\252\17\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\253\13\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\254\13\40\22\0\4\40\5\0\1\40\2\0\14\40"+
    "\1\255\6\40\22\0\4\40\5\0\1\40\2\0\7\40"+
    "\1\256\13\40\22\0\4\40\5\0\1\40\2\0\3\40"+
    "\1\257\17\40\22\0\4\66\5\0\1\66\2\0\7\66"+
    "\1\260\13\66\22\0\4\110\5\0\1\110\2\0\6\110"+
    "\1\261\14\110\22\0\4\110\5\0\1\110\2\0\2\110"+
    "\1\262\20\110\22\0\4\110\5\0\1\110\2\0\1\110"+
    "\1\263\21\110\22\0\4\40\5\0\1\40\2\0\1\264"+
    "\22\40\22\0\4\40\5\0\1\40\2\0\6\40\1\265"+
    "\14\40\22\0\4\40\5\0\1\40\2\0\13\40\1\266"+
    "\7\40\22\0\4\40\5\0\1\40\2\0\20\40\1\267"+
    "\2\40\22\0\4\40\5\0\1\40\2\0\13\40\1\270"+
    "\7\40\22\0\4\40\5\0\1\40\2\0\13\40\1\271"+
    "\7\40\22\0\4\40\5\0\1\40\2\0\17\40\1\272"+
    "\3\40\22\0\4\40\5\0\1\40\2\0\2\40\1\273"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\12\40\1\274"+
    "\10\40\22\0\4\40\5\0\1\40\2\0\1\40\1\275"+
    "\21\40\22\0\4\40\5\0\1\40\2\0\2\40\1\276"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\15\40\1\277"+
    "\5\40\22\0\4\66\5\0\1\66\2\0\12\66\1\300"+
    "\10\66\22\0\4\110\5\0\1\110\2\0\20\110\1\301"+
    "\2\110\22\0\4\110\5\0\1\110\2\0\13\110\1\302"+
    "\7\110\22\0\4\110\5\0\1\110\2\0\13\110\1\303"+
    "\7\110\22\0\4\40\5\0\1\40\2\0\6\40\1\304"+
    "\14\40\22\0\4\40\5\0\1\40\2\0\12\40\1\305"+
    "\10\40\22\0\4\40\5\0\1\40\2\0\6\40\1\306"+
    "\14\40\22\0\4\40\5\0\1\40\2\0\2\40\1\307"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\20\40\1\310"+
    "\2\40\22\0\4\40\5\0\1\40\2\0\13\40\1\311"+
    "\7\40\22\0\4\40\5\0\1\40\2\0\14\40\1\312"+
    "\6\40\22\0\4\40\5\0\1\40\2\0\6\40\1\313"+
    "\14\40\22\0\4\110\5\0\1\110\2\0\2\110\1\314"+
    "\20\110\22\0\4\110\5\0\1\110\2\0\20\110\1\315"+
    "\2\110\22\0\4\40\5\0\1\40\2\0\13\40\1\316"+
    "\7\40\22\0\4\40\5\0\1\40\2\0\2\40\1\317"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\20\40\1\320"+
    "\2\40\22\0\4\40\5\0\1\40\2\0\2\40\1\321"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\14\40\1\322"+
    "\6\40\22\0\4\40\5\0\1\40\2\0\4\40\1\323"+
    "\16\40\22\0\4\110\5\0\1\110\2\0\2\110\1\324"+
    "\20\110\22\0\4\40\5\0\1\40\2\0\2\40\1\325"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\2\40\1\326"+
    "\20\40\22\0\4\40\5\0\1\40\2\0\4\40\1\327"+
    "\16\40\22\0\4\110\5\0\1\110\2\0\4\110\1\330"+
    "\16\110\22\0\4\40\5\0\1\40\2\0\4\40\1\331"+
    "\16\40\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7987];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\15\0\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\2\11\25\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\7\11\1\1\1\11\2\1\1\11"+
    "\1\1\4\11\26\1\2\0\2\1\1\11\2\1\1\11"+
    "\2\0\23\1\2\11\125\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 65: break;
          case 2: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 66: break;
          case 3: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 4: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 5: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 69: break;
          case 6: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 70: break;
          case 7: 
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 72: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 73: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 74: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return ID;
            } 
            // fall through
          case 75: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 76: break;
          case 13: 
            { yybegin(xPARAM_ID); return ID;
            } 
            // fall through
          case 77: break;
          case 14: 
            { beginType(); yypushback(yylength());
            } 
            // fall through
          case 78: break;
          case 15: 
            { beginType(); return QM;
            } 
            // fall through
          case 79: break;
          case 16: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            } 
            // fall through
          case 80: break;
          case 17: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 81: break;
          case 18: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 82: break;
          case 19: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 83: break;
          case 20: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 84: break;
          case 21: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 85: break;
          case 22: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 86: break;
          case 23: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 87: break;
          case 24: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 88: break;
          case 25: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 89: break;
          case 26: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 90: break;
          case 27: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 91: break;
          case 28: 
            { yybegin(xCLASS_EXTEND); return ID;
            } 
            // fall through
          case 92: break;
          case 29: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 93: break;
          case 30: 
            { yybegin(xFIELD_ID_NULLABLE); return ID;
            } 
            // fall through
          case 94: break;
          case 31: 
            { yybegin(xFIELD_INDEX); return LBRACK;
            } 
            // fall through
          case 95: break;
          case 32: 
            { return NUM;
            } 
            // fall through
          case 96: break;
          case 33: 
            { beginType(); return RBRACK;
            } 
            // fall through
          case 97: break;
          case 34: 
            { yybegin(YYINITIAL); yypushback(yylength());
            } 
            // fall through
          case 98: break;
          case 35: 
            { return COMMA;
            } 
            // fall through
          case 99: break;
          case 36: 
            { return EXTENDS;
            } 
            // fall through
          case 100: break;
          case 37: 
            { beginType(); return ID;
            } 
            // fall through
          case 101: break;
          case 38: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 102: break;
          case 39: 
            { return DASHES;
            } 
            // fall through
          case 103: break;
          case 40: 
            { _typeReq = false; return ARR;
            } 
            // fall through
          case 104: break;
          case 41: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 105: break;
          case 42: 
            { return FUN;
            } 
            // fall through
          case 106: break;
          case 43: 
            { yybegin(xCLASS); return TAG_NAME_ENUM;
            } 
            // fall through
          case 107: break;
          case 44: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 108: break;
          case 45: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 109: break;
          case 46: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 110: break;
          case 47: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 111: break;
          case 48: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 112: break;
          case 49: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 113: break;
          case 50: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 114: break;
          case 51: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 115: break;
          case 52: 
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            } 
            // fall through
          case 116: break;
          case 53: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 117: break;
          case 54: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 118: break;
          case 55: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 119: break;
          case 56: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 120: break;
          case 57: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 121: break;
          case 58: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 122: break;
          case 59: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 123: break;
          case 60: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 124: break;
          case 61: 
            { yybegin(xCLASS); return TAG_NAME_INTERFACE;
            } 
            // fall through
          case 125: break;
          case 62: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 126: break;
          case 63: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 127: break;
          case 64: 
            { return TAG_NAME_DEPRECATED;
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
